"""
 mbed CMSIS-DAP debugger
 Copyright (c) 2006-2013 ARM Limited

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
"""

from .family.target_kinetis import Kinetis
from ..flash.flash import Flash
from ..core.target import Target
from ..core.coresight_target import CoreSightTarget
from ..core.memory_map import (FlashRegion, RamRegion, RomRegion, MemoryMap)
from ..debug.svd import SVDFile
from ..coresight import ap
from ..coresight.cortex_m import CortexM
import logging
import os.path
from time import sleep

SIM_SDID = 0x40026024
RCM_MR = 0x40020040
RCM_MR_BOOTROM_MASK = 0x6

MDM_STATUS = 0x00000000
MDM_CTRL = 0x00000004
MDM_CORE_STATUS = 0x00000050
MDM_IDR = 0x000000fc

MDM_STATUS_FLASH_MASS_ERASE_ACKNOWLEDGE = (1 << 0)
MDM_STATUS_FLASH_READY = (1 << 1)
MDM_STATUS_SYSTEM_SECURITY = (1 << 2)
MDM_STATUS_MASS_ERASE_ENABLE = (1 << 5)
MDM_STATUS_CORE_HALTED = (1 << 16)

MDM_CTRL_FLASH_MASS_ERASE_IN_PROGRESS = (1 << 0)
MDM_CTRL_DEBUG_REQUEST = (1 << 2)
MDM_CTRL_CORE_HOLD_RESET = (1 << 4)

MDM_CORE_STATUS_CM4_HALTED = (1 << 7)
MDM_CORE_STATUS_CM0P_HALTED = (1 << 15)

flash_algo = {
    'load_address' : 0x20000000,
    'instructions' : [
    0xE00ABE00, 0x062D780D, 0x24084068, 0xD3000040, 0x1E644058, 0x1C49D1FA, 0x2A001E52, 0x4770D1F2,
    0xb510484d, 0x6041494b, 0x71fff64f, 0x68016081, 0x0180f021, 0x0120f041, 0x48486001, 0xf4016901,
    0xf5b17140, 0xbf0c7f00, 0x21002101, 0x444a4a44, 0xb1397011, 0xf4216901, 0x61017140, 0xf4116901,
    0xd1fb7f40, 0x6841483f, 0x4180f041, 0x493e6041, 0x44492000, 0x46087248, 0xf87af000, 0xbf182800,
    0xbd102001, 0x44484836, 0xb1607800, 0x69014833, 0x7140f421, 0x7100f441, 0x69016101, 0x7140f401,
    0x7f00f5b1, 0x2000d1f9, 0x482f4770, 0x492fb510, 0xf0004448, 0x2800f8eb, 0xbd10bf18, 0x482a2100,
    0x4010e8bd, 0xf0004448, 0xb570baed, 0x46054c26, 0xf1b0444c, 0xbf8c7f80, 0x20002001, 0x48227260,
    0x46294b22, 0x68e24448, 0xf913f000, 0xbf182800, 0x2300bd70, 0x68e24629, 0x4070e8bd, 0x4448481a,
    0xbadaf000, 0x41f0e92d, 0x48174606, 0x24002501, 0x4690b084, 0x4448460f, 0x7f80f1b6, 0x7245bf8c,
    0x460b7244, 0x46314810, 0xf0004448, 0x2800f974, 0xb004bf1c, 0x81f0e8bd, 0x5400e9cd, 0x4643480a,
    0x4631463a, 0x94024448, 0xfb04f000, 0xe8bdb004, 0x000081f0, 0xd928c520, 0x4002a000, 0x40020000,
    0x00000004, 0x4002b000, 0x00000008, 0x6b65666b, 0xbf042800, 0x47702004, 0x7a46b470, 0x4dfe49fd,
    0x158c447d, 0x23004afd, 0xf44f6cc9, 0x2e015c80, 0x0f09d01d, 0xbf0e290f, 0x1180f44f, 0x1011f835,
    0xe9c00289, 0x21023100, 0xf8c07201, 0xf892c00c, 0xfa04102c, 0x6141f101, 0x102df892, 0x61816103,
    0x4190f04f, 0x1c08e9c0, 0x2000bc70, 0xf3c14770, 0x290f6103, 0xf835bf1a, 0x02891011, 0x2180f44f,
    0xf04f6041, 0x60017180, 0x72012101, 0x60c102c9, 0x102ef892, 0xf101fa04, 0xf8926141, 0xe7dd102f,
    0xbf0e2800, 0x61012004, 0x47702000, 0x680148dc, 0x0130f041, 0xf3bf6001, 0xf3bf8f6f, 0x47708f4f,
    0x680148d8, 0x0101f041, 0xf3bf6001, 0xf3bf8f6f, 0x47708f4f, 0x680148d3, 0x0101f041, 0xf3bf6001,
    0xf3bf8f6f, 0x48ce8f4f, 0xf0416801, 0x60010130, 0x8f6ff3bf, 0x8f4ff3bf, 0x48c84770, 0x70012170,
    0x70012180, 0xf0117801, 0xd0fb0f80, 0xf0107800, 0xbf1c0f20, 0x47702067, 0x0f10f010, 0x2068bf1c,
    0xf0104770, 0xbf180001, 0x47702069, 0xbf042800, 0x47702004, 0x4604b510, 0xf06f4ab8, 0x6050403b,
    0x428148b9, 0x206bbf14, 0x28002000, 0xbd10bf18, 0xf7ff4620, 0x4602ffd2, 0xf7ff4620, 0x4610ffbb,
    0x2800bd10, 0x2004bf04, 0x23004770, 0x60536013, 0x60d36093, 0x61536113, 0x61d36193, 0x1ac96803,
    0x68c36011, 0xf8906053, 0x6843c008, 0xf3fcfbb3, 0x7a436093, 0x2b012008, 0xf501bf04, 0x60110100,
    0x61112110, 0xe9c260d0, 0x20041005, 0x200061d0, 0xe92d4770, 0xb0884df0, 0x46984615, 0x4682460c,
    0xf7ff466a, 0x462affce, 0x46504621, 0xf0009b04, 0x0007fd97, 0xb008bf1c, 0x8df0e8bd, 0x4600e9dd,
    0x1e451960, 0xf0f6fbb5, 0x5010fb06, 0xfbb5b120, 0x1c40f0f6, 0x1e454370, 0xbf9842ac, 0xb21cf8df,
    0xf024d81c, 0xf040407f, 0xf8cb6010, 0x48860004, 0xbf144580, 0x2000206b, 0xbf1c2800, 0xe8bdb008,
    0x46508df0, 0xff69f7ff, 0xf8da4607, 0x28000010, 0x4780bf18, 0x4434b917, 0xd9e242ac, 0xf7ff4650,
    0xb008ff49, 0xe8bd4638, 0x28008df0, 0x2004bf04, 0xb5104770, 0x4a714604, 0x4036f06f, 0x48726050,
    0xbf144281, 0x2000206b, 0xbf182800, 0x4620bd10, 0xff43f7ff, 0x46204602, 0xff2cf7ff, 0xbd104610,
    0xbf042800, 0x47702004, 0x4604b510, 0xf06f4a63, 0x60504034, 0x42814864, 0x206bbf14, 0x28002000,
    0xbd10bf18, 0xf7ff4620, 0x4602ff28, 0xf7ff4620, 0x4610ff11, 0x2a00bd10, 0x2004bf04, 0xe92d4770,
    0xb08945f0, 0x461e4614, 0x4680460d, 0xf7ff466a, 0x4632ff48, 0x46404629, 0xf0009b03, 0x0007fd11,
    0xb009bf1c, 0x85f0e8bd, 0x2e009d00, 0xf8dfbf18, 0xd025a12c, 0x0b04f854, 0x0008f8ca, 0x28049803,
    0xf025bf04, 0xf040407f, 0xd00960c0, 0xd1092808, 0x0b04f854, 0x000cf8ca, 0x407ff025, 0x60e0f040,
    0x0004f8ca, 0xf7ff4640, 0xf8d8fee8, 0x46071010, 0xbf182900, 0xb91f4788, 0x44059803, 0xd1d91a36,
    0xf7ff4640, 0xb009fec7, 0xe8bd4638, 0x280085f0, 0x2a00bf12, 0x47702004, 0x4604b510, 0x4933b2c8,
    0x4100ea41, 0x6041482d, 0x60816811, 0x60c16851, 0xf7ff4620, 0x4602fec2, 0xf7ff4620, 0x4610feab,
    0x2a00bd10, 0x2004bf04, 0xe92d4770, 0xb08a4dff, 0x46984692, 0x466a460c, 0xf7ff980a, 0x4642fee2,
    0x9b054621, 0xf000980a, 0xea5ffcab, 0xbf1c0b00, 0xe8bdb00e, 0xe9dd8df0, 0x90087000, 0x0f00f1b8,
    0x4240bf1c, 0xd0699009, 0x42799809, 0x42404008, 0x42b82500, 0x9908bf04, 0xeb084408, 0x42810107,
    0x1bc4bf8c, 0x2c004644, 0xf5b4d051, 0xbf8c6f80, 0x6680f44f, 0xf0254626, 0xeb000003, 0x4632010a,
    0x4090f04f, 0xfc93f000, 0xf0201978, 0xf040407f, 0xe00d6030, 0x40026000, 0x00000d44, 0x40023000,
    0x40001400, 0xe0080034, 0x6b65666b, 0x4300ffff, 0x604849fe, 0xf64f9805, 0xfbb672ff, 0xea42f0f0,
    0x60884000, 0xf7ff980a, 0x4683fe58, 0x6900980a, 0xbf182800, 0xf1bb4780, 0xd0150f00, 0x680148f4,
    0x0101f041, 0xf3bf6001, 0xf3bf8f6f, 0x48f18f4f, 0xf0416801, 0x60010130, 0x8f6ff3bf, 0x8f4ff3bf,
    0x4658b00e, 0x8df0e8bd, 0x44351ba4, 0xf025d1ad, 0x44820003, 0xebb8442f, 0xd1950805, 0xf7ff980a,
    0xe7edfe19, 0xbf122800, 0x20042a00, 0xb5704770, 0x4ae14614, 0xb2c94ddd, 0x4101ea42, 0xf7ff6069,
    0x2800fe1c, 0xbd70bf18, 0x602168a9, 0x606168e9, 0x2800bd70, 0x2900bf12, 0x47702004, 0x788048d3,
    0x0203f000, 0xbf042a02, 0x70082000, 0xf000d006, 0x288000c0, 0x2001bf0c, 0x70082002, 0x47702000,
    0x0c00ea5f, 0x2900bf12, 0x47702004, 0x0000f04f, 0x789a4bc6, 0x0203f002, 0xbf082a02, 0xf06f4770,
    0x6058403a, 0x78ca6808, 0xf020ba00, 0x431000ff, 0x68486098, 0xba0079c9, 0x00fff020, 0x60d84308,
    0xe5da4660, 0xbf042800, 0x47702004, 0xea424abb, 0x4ab64101, 0xe5d06051, 0x4dffe92d, 0x4614b088,
    0x460d469a, 0x9808466a, 0xfdfbf7ff, 0x46294622, 0x98089b05, 0xfbc4f000, 0xbf1c2800, 0xe8bdb00c,
    0x466a8df0, 0x98084629, 0xfdebf7ff, 0xf8dd9e00, 0x42708008, 0x0100f1c8, 0x42474008, 0xbf0842b7,
    0x2c004447, 0xf8dfbf18, 0xd01fb284, 0x42a51bbd, 0x4625bf88, 0xf0269805, 0xfbb5417f, 0xf041f0f0,
    0xf8cb7180, 0x04001004, 0x200aea40, 0x00fff040, 0x0008f8cb, 0xf7ff9808, 0x2800fd90, 0xb00cbf1c,
    0x8df0e8bd, 0x442e1b64, 0xd1df4447, 0x2000b00c, 0x8df0e8bd, 0xbf042b00, 0x47702004, 0x4dffe92d,
    0x4616b088, 0x7a14e9dd, 0x460c461d, 0xf8dd466a, 0x98088058, 0xfda5f7ff, 0x3007e9dd, 0x46214632,
    0xfb6ef000, 0xbf1c2800, 0xe8bdb00c, 0x9c008df0, 0xbf042e00, 0xe8bdb00c, 0xf8df8df0, 0xf06fb1f0,
    0xea40407f, 0xf0246707, 0xf040407f, 0xf8cb7000, 0xf8cb0004, 0x68287008, 0x000cf8cb, 0xf7ff9808,
    0xb168fd4c, 0x0f00f1ba, 0xf8cabf18, 0xf1b84000, 0xbf1c0f00, 0xf8c82100, 0xb00c1000, 0x8df0e8bd,
    0x1a769907, 0x0103f021, 0x9907440d, 0xd1da440c, 0xe8bdb00c, 0x28008df0, 0x2004bf04, 0x4a684770,
    0x4101ea42, 0x60514a61, 0x2b00e527, 0x2004bf04, 0xe92d4770, 0x461d4df0, 0x4690b0d4, 0x4606460c,
    0xf0002308, 0x2800fb1d, 0xb054bf1c, 0x8df0e8bd, 0x2e002700, 0xf04fbf08, 0xd0140c04, 0x97429741,
    0xe9d69743, 0x91411000, 0x29017a71, 0x2110bf0c, 0x91432140, 0x2f81ebb0, 0xfbb0bf8c, 0xf44ff0f1,
    0x46bc6080, 0xf1bc9042, 0xd16f0f00, 0x0308eb04, 0x46e82100, 0x0241e9dd, 0x0001fb02, 0x0021f848,
    0x1c499843, 0xd9f54281, 0xa9442200, 0xbf842800, 0xa009f896, 0xd973483d, 0x0f01f1ba, 0x2a08d007,
    0x7f06d21a, 0xf00640d6, 0x548e0601, 0x2a08e064, 0xf890d206, 0x40d66024, 0x0601f006, 0xe05b548e,
    0x0608f1a2, 0xd25b2e08, 0xb025f890, 0xf606fa2b, 0x0601f006, 0xe04f548e, 0x0608f1a2, 0xd2072e08,
    0xb01df890, 0xf606fa2b, 0x0601f006, 0xe043548e, 0x0610f1a2, 0xd2072e08, 0xb01ef890, 0xf606fa2b,
    0x0601f006, 0xe037548e, 0x0618f1a2, 0xd2072e08, 0xb01ff890, 0xf606fa2b, 0x0601f006, 0xe02b548e,
    0xd2082a28, 0xf1a27e06, 0xfa260b20, 0xf006f60b, 0x548e0601, 0x2a30e020, 0x7e46d209, 0x0b28f1a2,
    0xf60bfa26, 0x0601f006, 0xe015548e, 0x2a38e049, 0x7e86d208, 0x0b30f1a2, 0xf60bfa26, 0x0601f006,
    0xe009548e, 0xd20b2a40, 0xf1a27ec6, 0xfa260b38, 0xf006f60b, 0x548e0601, 0x1c529e43, 0xd88b4296,
    0x46062000, 0x42a34602, 0xe00bd92a, 0x40023000, 0xe0080034, 0x40001400, 0x4100ffff, 0x4000ffff,
    0x4a00ffff, 0xa020f858, 0xd80f45a2, 0x0a80eb08, 0xa004f8da, 0xd2094554, 0xa000f811, 0xf1ba1c76,
    0xbf080f00, 0xf8dd1c52, 0x4454a108, 0x429c1c40, 0xb12ad3db, 0xbf0c42b2, 0x20022001, 0xe0007028,
    0xb054702f, 0xe8bd4660, 0x2b008df0, 0x2004bf04, 0xe92d4770, 0x461e4df0, 0x4690b084, 0x4605460c,
    0xf0002308, 0x2800fa2d, 0xb004bf1c, 0x8df0e8bd, 0x2d002700, 0xf04fbf08, 0xd00a0a04, 0x97019700,
    0x68289702, 0x69689000, 0x69a89001, 0x0a00f04f, 0xf1ba9002, 0xd1470f00, 0xeb049801, 0x42400208,
    0x0104ea00, 0x40184253, 0x42404408, 0xf04f9901, 0xfbb00c00, 0x4294f8f1, 0x7a6dd235, 0xf04f4bfd,
    0x98000b01, 0x1a209901, 0xf0f1fbb0, 0xd01d2d01, 0xbf382820, 0xd3056b59, 0x42889902, 0x6b19bf3c,
    0xd2093820, 0xf000fa0b, 0xbf184388, 0x0c01f10c, 0x44049801, 0xd3e44294, 0x0f00f1bc, 0x45c4d013,
    0xf886bf2e, 0x2002b000, 0xe00d7030, 0xbf382808, 0x1044f893, 0x9902d3e6, 0xbf3c4288, 0x1045f893,
    0xd3df3808, 0x7037e7e8, 0x4650b004, 0x8df0e8bd, 0xbf122800, 0x20042a00, 0x290a4770, 0xe8dfd21d,
    0x0705f001, 0x100e0c09, 0x18161412, 0xe01168c0, 0xe00f6840, 0x08406840, 0x7a00e00c, 0x6800e00a,
    0x2001e008, 0x6940e006, 0x6980e004, 0x6a00e002, 0x6a40e000, 0x20006010, 0x206a4770, 0x23004770,
    0xbf042800, 0x47702004, 0xd0242906, 0x2905dc02, 0xe020d80e, 0xd01e2909, 0x2907dc04, 0x2908bf18,
    0xe018d106, 0x0cfff002, 0xd0042920, 0xd00b2921, 0x4618236a, 0x2a004770, 0x2a01bf14, 0xc009f880,
    0xf04fd0f7, 0x47700077, 0xbf142a00, 0xf8802a01, 0xd1f6c00a, 0xf04fe7ed, 0xe7ea0376, 0x461cb570,
    0xbf120003, 0x20042c00, 0xf011bd70, 0xbf1c0f0f, 0xbd702065, 0xebb16858, 0xd2030f50, 0x6080f5a1,
    0xd801280f, 0xbd702075, 0xbf182a01, 0xd01f2a02, 0xbf182a04, 0xd01b2a08, 0xbf182a10, 0xd0172004,
    0xbf182800, 0xf021bd70, 0x4da2407f, 0x408cf040, 0xf06f6068, 0xea40407f, 0x60a86002, 0xf7ff4618,
    0x7aa9fb3c, 0x7a697021, 0x7a297061, 0xbd7070a1, 0xe7e52000, 0x4df7e92d, 0x4680b08b, 0x30fff04f,
    0xa254f8df, 0x9000468b, 0x2208466b, 0x46404659, 0xffb4f7ff, 0xbf1c2800, 0xe8bdb00e, 0x990d8df0,
    0xd0082901, 0x1000f89d, 0xd27c2906, 0xf001e8df, 0x87451e17, 0xf89d088d, 0x28050000, 0xb138d004,
    0x2074b00e, 0x8df0e8bd, 0x2000b00e, 0x8df0e8bd, 0x2210466b, 0x46404659, 0xff90f7ff, 0x466be075,
    0x46592201, 0xf7ff4640, 0xe06eff89, 0xaa022304, 0x464021a1, 0xfcc6f7ff, 0x9802b998, 0xb2842304,
    0x21a2aa02, 0xf7ff4640, 0xb950fcbd, 0xaa022304, 0x464021a3, 0xfcb6f7ff, 0x0121b918, 0xbf18458b,
    0x28002075, 0xb00ebf1c, 0x8df0e8bd, 0x2202466b, 0x46404659, 0xff62f7ff, 0xf8d8e047, 0x24100004,
    0x0550eb0b, 0x4629aa02, 0xf7ff4640, 0x4622fafa, 0x46404629, 0xf0009b06, 0x0007f8c3, 0xe9ddd135,
    0xf1044602, 0xfbb5050f, 0xfb06f0f6, 0xb1205010, 0xf0f6fbb5, 0x43701c40, 0x42ac1e45, 0xf024d81a,
    0xf040407f, 0x48536110, 0x49536041, 0xbf14458a, 0x2000206b, 0x4640b9c8, 0xfa9ff7ff, 0xf8d84607,
    0x28000010, 0xe020e000, 0x4780bf18, 0x4434b917, 0xd9e442ac, 0xf7ff4640, 0x4638fa7d, 0x466be005,
    0x46592204, 0xf7ff4640, 0x2800ff19, 0xb00ebf1c, 0x8df0e8bd, 0x1000f89d, 0xbf042904, 0x2900990d,
    0xaf52f47f, 0xe8bdb00e, 0xb00e8df0, 0x0004f04f, 0x8df0e8bd, 0xbf042800, 0x47702004, 0x2a017a42,
    0xd00d4834, 0x61c2680a, 0x69c3680a, 0xd105429a, 0x6182684a, 0x69806849, 0xd0114281, 0x47702069,
    0xf880780a, 0x780a2024, 0x3024f890, 0xd1f5429a, 0xf880784a, 0x78492025, 0x0025f890, 0xd1ed4281,
    0x47702000, 0xbf122800, 0x20042900, 0x7a424770, 0x48202a01, 0xf890bf01, 0x700a2024, 0x0025f890,
    0xbf1f7048, 0x600a69c2, 0x60486980, 0x47702000, 0x491a6802, 0x3ffff1b2, 0x680ad00e, 0x0220f022,
    0x6840600a, 0x68082800, 0xf020bf0c, 0xf0400010, 0x60080010, 0x47702000, 0x28006840, 0x2078bf04,
    0x68084770, 0x0020f040, 0xe7f36008, 0x60012100, 0x490a6041, 0xf04f6809, 0xf01132ff, 0xbf1c0f20,
    0x60426002, 0xf011d103, 0xbf180f10, 0x20006042, 0x00004770, 0x40023000, 0x6b65666b, 0x40001400,
    0xbf042800, 0x47702004, 0x0301f1a3, 0xbf0e4219, 0x2065421a, 0x68034770, 0xd806428b, 0x44116840,
    0x42884418, 0x2000bf24, 0x20664770, 0xea404770, 0x079b0301, 0xe009d003, 0x1f12c908, 0x2a04c008,
    0xe003d2fa, 0x3b01f811, 0x3b01f800, 0xd2f91e52, 0x00004770, 0x40023004, 0x4002301c, 0x40023018,
    0x40023024, 0x40023025, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000100,
    0x00000400, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000
    ],

    'pc_init' : 0x20000021,
    'pc_unInit': 0x20000085,
    'pc_program_page': 0x20000105,
    'pc_erase_sector': 0x200000cb,
    'pc_eraseAll' : 0x200000ab,

    'static_base' : 0x20000000 + 0x00000020 + 0x00000ee8,
    'begin_stack' : 0x20000000 + 0x00001400,
    'begin_data' : 0x20000000 + 0x00002000,
    'page_size' : 0x00000200,
    'analyzer_supported' : True,
    'analyzer_address' : 0x1ffff000,  # Analyzer 0x1ffff000..0x1ffff600
    'page_buffers' : [0x20003000, 0x20004000],   # Enable double buffering
    'min_program_length' : 8,
};

# Derive from Flash instead of Flash_Kinetis since the FCF is in IFR and not main flash.
class Flash_k32w042s(Flash):
    def __init__(self, target):
        super(Flash_k32w042s, self).__init__(target, flash_algo)

class K32W042S(Kinetis):

    memoryMap = MemoryMap(
        FlashRegion(name='flash0',      start=         0,   length=0x100000,    blocksize=0x1000, isBootMemory=True),
        FlashRegion(name='flash1',      start= 0x1000000,   length=0x40000,     blocksize=0x800),
        RamRegion(  name='m4 itcm',     start= 0x8000000,   length=0x10000),
        RomRegion(  name='boot rom',    start= 0x8800000,   length=0xc000),
        RamRegion(  name='m0p tcm',     start= 0x9000000,   length=0x20000),
        RamRegion(  name='m4 dtcm',     start=0x20000000,   length=0x30000),
        RamRegion(  name='flexram',     start=0x48000000,   length=0x1000),
        RamRegion(  name='usb ram',     start=0x48010000,   length=0x800),
        )

    def __init__(self, link):
        super(K32W042S, self).__init__(link, self.memoryMap)
        self.mdm_idr = 0x001c0040

        svdPath = os.path.join(os.path.dirname(__file__), "K32W042S1M2_M4.xml")
        if os.path.exists(svdPath):
            self._svd_location = SVDFile(vendor="NXP", filename=svdPath, is_local=True)

    def init(self):
        CoreSightTarget.init(self, bus_accessible=False)

        self.mdm_ap = ap.AccessPort(self.dp, 1)
        self.aps[1] = self.mdm_ap
        self.mdm_ap.init(False)

        # check MDM-AP ID
        if self.mdm_ap.idr != self.mdm_idr:
            logging.error("%s: bad MDM-AP IDR (is 0x%08x, expected 0x%08x)", self.part_number, self.mdm_ap.idr, self.mdm_idr)

        # check for flash security
        isLocked = self.isLocked()
        if isLocked:
            if self.do_auto_unlock:
                logging.warning("%s in secure state: will try to unlock via mass erase", self.part_number)
                # keep the target in reset until is had been erased and halted
                self.dp.assert_reset(True)
                if not self.massErase():
                    self.dp.assert_reset(False)
                    logging.error("%s: mass erase failed", self.part_number)
                    raise Exception("unable to unlock device")
                # Use the MDM to keep the target halted after reset has been released
                self.mdm_ap.write_reg(MDM_CTRL, MDM_CTRL_DEBUG_REQUEST)
                # Enable debug
                self.writeMemory(CortexM.DHCSR, CortexM.DBGKEY | CortexM.C_DEBUGEN)
                self.dp.assert_reset(False)
                while self.mdm_ap.read_reg(MDM_CORE_STATUS) & MDM_CORE_STATUS_CM4_HALTED != MDM_CORE_STATUS_CM4_HALTED:
                    logging.debug("Waiting for mdm halt (erase)")
                    sleep(0.01)

                # release MDM halt once it has taken effect in the DHCSR
                self.mdm_ap.write_reg(MDM_CTRL, 0)

                isLocked = False
            else:
                logging.warning("%s in secure state: not automatically unlocking", self.part_number)
        else:
            logging.info("%s not in secure state", self.part_number)

        # Can't do anything more if the target is secure
        if isLocked:
            return

        if self.halt_on_connect:
            # Prevent the target from resetting if it has invalid code
            self.mdm_ap.write_reg(MDM_CTRL, MDM_CTRL_DEBUG_REQUEST | MDM_CTRL_CORE_HOLD_RESET)
            while self.mdm_ap.read_reg(MDM_CTRL) & (MDM_CTRL_DEBUG_REQUEST | MDM_CTRL_CORE_HOLD_RESET) != (MDM_CTRL_DEBUG_REQUEST | MDM_CTRL_CORE_HOLD_RESET):
                self.mdm_ap.write_reg(MDM_CTRL, MDM_CTRL_DEBUG_REQUEST | MDM_CTRL_CORE_HOLD_RESET)
            # Enable debug
            self.writeMemory(CortexM.DHCSR, CortexM.DBGKEY | CortexM.C_DEBUGEN)
            # Disable holding the core in reset, leave MDM halt on
            self.mdm_ap.write_reg(MDM_CTRL, MDM_CTRL_DEBUG_REQUEST)

            # Wait until the target is halted
            while self.mdm_ap.read_reg(MDM_CORE_STATUS) & MDM_CORE_STATUS_CM4_HALTED != MDM_CORE_STATUS_CM4_HALTED:
                logging.debug("Waiting for mdm halt")
                sleep(0.01)

            # release MDM halt once it has taken effect in the DHCSR
            self.mdm_ap.write_reg(MDM_CTRL, 0)

            # sanity check that the target is still halted
            if self.getState() == Target.TARGET_RUNNING:
                raise Exception("Target failed to stay halted during init sequence")

        self.aps[0].init(bus_accessible=True)
        self.cores[0].init()

        # Check if this is the dual core part.
        sdid = self.readMemory(SIM_SDID)
        logging.debug("SDID=0x%08x", sdid)

        # Add second core's AHB-AP.
        core1_ap = ap.AHB_AP(self.dp, 2)
        core1_ap.init(True)
        self.add_ap(core1_ap)

        # Add second core. It is held in reset until released by software.
        core1 = CortexM(self, self.dp, core1_ap, self.memory_map, core_num=1)
        core1.init()
        self.add_core(core1)

        # Disable ROM vector table remapping.
#         self.write32(RCM_MR, RCM_MR_BOOTROM_MASK)

    def massErase(self):
        self.dp.assert_reset(True)
        result = super(K32W042S, self).massErase()
        self.dp.assert_reset(False)
        return result

